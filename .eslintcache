[{"C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\index.js":"1","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\App.js":"2","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\reportWebVitals.js":"3","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\views\\ZipView.js":"4","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\views\\DistrictView.js":"5","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\views\\CityView.js":"6","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\home\\Home.js":"7","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\setUp\\dataSetUp.js":"8","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\header\\Header.js":"9","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\home\\Grid.js":"10","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\header\\Search.js":"11","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\views\\Table.js":"12","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\home\\InfoView.js":"13","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\home\\TableByCity.js":"14","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\home\\TableByCitySide.js":"15","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\home\\RegionHistoryGraph.js":"16","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\setUp\\PXWeb\\getData.js":"17","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\setUp\\PXWeb\\parseResponse.js":"18","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\setUp\\PXWeb\\api\\api.js":"19","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\setUp\\PXWeb\\api\\apiGET.js":"20"},{"size":569,"mtime":1610885355782,"results":"21","hashOfConfig":"22"},{"size":2029,"mtime":1613119118327,"results":"23","hashOfConfig":"22"},{"size":375,"mtime":1610352796710,"results":"24","hashOfConfig":"22"},{"size":1926,"mtime":1613119234076,"results":"25","hashOfConfig":"22"},{"size":2203,"mtime":1611151800238,"results":"26","hashOfConfig":"22"},{"size":1919,"mtime":1613119240752,"results":"27","hashOfConfig":"22"},{"size":6671,"mtime":1613118324417,"results":"28","hashOfConfig":"22"},{"size":14457,"mtime":1611336055321,"results":"29","hashOfConfig":"22"},{"size":5125,"mtime":1611225158236,"results":"30","hashOfConfig":"22"},{"size":1231,"mtime":1611335310766,"results":"31","hashOfConfig":"22"},{"size":1130,"mtime":1611066906595,"results":"32","hashOfConfig":"22"},{"size":10976,"mtime":1611151800240,"results":"33","hashOfConfig":"22"},{"size":4397,"mtime":1611066907143,"results":"34","hashOfConfig":"22"},{"size":7492,"mtime":1611336662780,"results":"35","hashOfConfig":"22"},{"size":1565,"mtime":1611332169781,"results":"36","hashOfConfig":"22"},{"size":6619,"mtime":1611822642724,"results":"37","hashOfConfig":"22"},{"size":3204,"mtime":1611701051619,"results":"38","hashOfConfig":"22"},{"size":7742,"mtime":1611695730898,"results":"39","hashOfConfig":"22"},{"size":2806,"mtime":1611699430523,"results":"40","hashOfConfig":"22"},{"size":1370,"mtime":1611689059714,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"he8xts",{"filePath":"45","messages":"46","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"44"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\index.js",[],["96","97"],"C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\App.js",["98","99","100","101","102","103"],"C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\reportWebVitals.js",[],"C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\views\\ZipView.js",["104","105","106","107"],"C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\views\\DistrictView.js",["108"],"import { useParams } from \"react-router-dom\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Grid from \"../home/Grid\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport getData from \"./../../setUp/dataSetUp\";\r\nimport Table from \"./Table\";\r\n\r\nexport default function DistrictView(props) {\r\n  let { district } = useParams();\r\n  let Sales = findDistrictData(props.cityData, district);\r\n\r\n\r\n  const [summaryByRooms, setsummaryByRooms] = useState([]);\r\n  const [apartmentInfoActive, setApartmentInfoActive] = useState(\"Kaikki\");\r\n\r\n  const onClickHandler = (e) => {\r\n    setApartmentInfoActive(e.target.id);\r\n  };\r\n\r\n  useEffect(() => {      \r\n    getData(\"summaryByRooms\", { sales: Sales }).then((summaries) => {\r\n        setsummaryByRooms(summaries);\r\n    })\r\n\r\n  }, []);\r\n\r\n  // Haetaan listalta oikean kaupunginosan tiedot\r\n  // Huom: Ei erottele kaupunkine välillä!\r\n  function findDistrictData(array, value) {\r\n    let returnValue = [];\r\n\r\n    for (let i in array){\r\n      for(let j in array[i].data){\r\n        if (array[i].data[j].kaupunginosa === value) {\r\n          returnValue.push(array[i].data[j]);\r\n        }\r\n      }\r\n    }\r\n    return returnValue;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 style={{ padding: \"50px\" }}>{district}</h1>\r\n      <div className=\"flex-container\">\r\n        <div style={{ width: \"100%\" }}>\r\n            <h5>Tilastoja huonekohtaisesti</h5>\r\n            <Grid\r\n                data={summaryByRooms}\r\n                width=\"100%\"\r\n                onClick={onClickHandler}\r\n            />\r\n            <div\r\n              style={{\r\n                height: \"50px\",\r\n                alignContent: \"center\",\r\n                verticalAlign: \"center\",\r\n              }}\r\n            >\r\n            </div>\r\n\r\n            <div style={{ width: \"100%\" }}>\r\n                <h5>{apartmentInfoActive}</h5>\r\n                <Table sales={Sales} room={apartmentInfoActive} />\r\n            </div>\r\n            <div\r\n              style={{\r\n                height: \"100px\",\r\n                alignContent: \"center\",\r\n                verticalAlign: \"center\",\r\n              }}\r\n            >\r\n            </div>\r\n        </div>\r\n      </div>      \r\n    </div>\r\n  );\r\n}","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\views\\CityView.js",["109","110","111","112"],"C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\home\\Home.js",["113","114","115","116"],"import { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport getData from \"../../setUp/dataSetUp\";\r\nimport Grid from \"./Grid\";\r\nimport InfoView from \"./InfoView\";\r\nimport TableByCity from \"./TableByCity\";\r\nimport TableByCitySide from \"./TableByCitySide\";\r\nimport RegionHistoryGraph from \"./RegionHistoryGraph\";\r\n\r\nexport default function Home({ transactionsByCity }) {\r\n  const [summaryData, setsummaryData] = useState([]);\r\n  const [summaryDataByCity, setsummaryDataByCity] = useState([]);\r\n  const [regionInfoActive, setRegionInfoActive] = useState(\"Suomi\");\r\n  const [regionActiveCityList, setRegionActiveCityList] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [initLoad, setInitLoad] = useState(false);\r\n  const [cityTableInfo, setCityTableInfo] = useState(\"\");\r\n\r\n  const onClickHandler = (e) => {\r\n    console.log(e);\r\n    console.log(\"onClickHandler\");\r\n    setRegionInfoActive(e.target.id);\r\n    if (e.target.id === \"Suomi\") {\r\n      setCityTableInfo(\"\");\r\n    }\r\n  };\r\n  const onClickHandlerCityTable = (e) => {\r\n    console.log(e);\r\n    console.log(\"onClickHandlerCityTable\");\r\n    setCityTableInfo(e.indexValue);\r\n  };\r\n\r\n  const onClickHandlerCityTableSide = (e) => {\r\n    console.log(e);\r\n    console.log(\"onClickHandlerCityTableSide\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    setCityTableInfo(\"\");\r\n  }, [regionInfoActive]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      let res_summaryByAreaCountry = await getData(\"summaryByArea\", {\r\n        type: \"country\",\r\n      });\r\n\r\n      setsummaryData(res_summaryByAreaCountry);\r\n      setLoading(false);\r\n      setInitLoad(true);\r\n    };\r\n    setLoading(true);\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (initLoad === false) return null;\r\n    if (initLoad === \"complete\") return null;\r\n    const fetchData = async () => {\r\n      let res_summaryByAreaRegion = await getData(\"summaryByArea\", {\r\n        type: \"region\",\r\n      });\r\n\r\n      setsummaryData([...summaryData, ...res_summaryByAreaRegion]);\r\n\r\n      /* let res_summaryByAreaCity = await getData(\"summaryByArea\", {\r\n        type: \"city\",\r\n      });\r\n\r\n      setsummaryDataByCity(res_summaryByAreaCity);\r\n      console.log(res_summaryByAreaCity);\r\n      console.log(\"res_summaryByAreaCity\"); */\r\n\r\n      setInitLoad(\"complete\");\r\n      setLoading(false);\r\n    };\r\n    setLoading(true);\r\n    fetchData();\r\n  }, [initLoad]);\r\n\r\n  useEffect(() => {\r\n    if (initLoad !== \"complete\") return null;\r\n    console.log(\"regionMuuttu\");\r\n\r\n    const fetchData = async () => {\r\n      let res_summaryByAreaCity = await getData(\"summaryByArea\", {\r\n        type: \"city\",\r\n      });\r\n      let cities = [];\r\n      try {\r\n        let citiesByRegionRes = await getData(\"citiesByRegion\");\r\n\r\n        cities = citiesByRegionRes.filter(\r\n          (e) => e.place === regionInfoActive\r\n        )[0].data;\r\n      } catch (error) {}\r\n\r\n      console.log(cities);\r\n      let data = [];\r\n      for (const city in cities) {\r\n        try {\r\n          console.log(cities[city]);\r\n          data.push(\r\n            res_summaryByAreaCity.filter((e) => e.place === cities[city])[0]\r\n          );\r\n        } catch (error) {}\r\n      }\r\n\r\n      setRegionActiveCityList(data);\r\n    };\r\n\r\n    fetchData();\r\n    console.log(\"DATA_HAETTU.OUTSIDE\");\r\n  }, [regionInfoActive]);\r\n\r\n  return (\r\n    <div>\r\n      <h1 style={{ paddingTop: \"50px\" }}>Kauppahinnat.fi</h1>\r\n      <h3 style={{ paddingBottom: \"50px\" }}>Dataa asuntojen hinnoista</h3>\r\n\r\n      <div>\r\n        <RegionHistoryGraph />\r\n      </div>\r\n\r\n      <div className=\"flex-container\">\r\n        <div style={{ width: \"50%\" }}>\r\n          <h5\r\n            style={\r\n              {\r\n                /* width: \"50%\" */\r\n              }\r\n            }\r\n          >\r\n            Tilastoja maakunnittain\r\n          </h5>\r\n\r\n          {loading === false ? (\r\n            <div>\r\n              <Grid data={summaryData} width=\"100%\" onClick={onClickHandler} />\r\n\r\n              {initLoad !== \"complete\" ? (\r\n                <div style={{ paddingTop: \"100px\", fontSize: \"2em\" }}>\r\n                  Hetki, ladataan lisää tietoa..\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n          ) : (\r\n            <div\r\n              style={{\r\n                height: \"400px\",\r\n                alignContent: \"center\",\r\n                verticalAlign: \"center\",\r\n              }}\r\n            >\r\n              {\" \"}\r\n              ladataan...{\" \"}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div style={{ width: \"50%\" }}>\r\n          <h5\r\n            style={\r\n              {\r\n                /* width: \"50%\"  */\r\n              }\r\n            }\r\n          >\r\n            {regionInfoActive}\r\n          </h5>\r\n          {loading === false ? (\r\n            <InfoView data={summaryData} area={regionInfoActive} width=\"100%\" />\r\n          ) : (\r\n            <div\r\n              style={{\r\n                height: \"400px\",\r\n                alignContent: \"center\",\r\n                verticalAlign: \"center\",\r\n              }}\r\n            >\r\n              {\" \"}\r\n              ladataan...{\" \"}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        className=\"flex-container\"\r\n        style={{ /* height: \"300px\", */ margin: \"30px\" }}\r\n      >\r\n        <div style={{ maxHeight: \"500\", width: \"80%\" }}>\r\n          <h6>\r\n            {\" \"}\r\n            {regionInfoActive === \"Suomi\" ? \"\" : regionInfoActive + \" -\"} kaupat\r\n            kaupungeittain\r\n          </h6>\r\n\r\n          <TableByCity\r\n            area={regionInfoActive}\r\n            data={regionActiveCityList}\r\n            summaryData={summaryData}\r\n            onClickHandler={onClickHandlerCityTable}\r\n          />\r\n        </div>\r\n\r\n        <div\r\n          style={{\r\n            maxHeight: \"280px\",\r\n            /* overflowY: \"scroll\", */ paddingTop: \"50px\",\r\n            width: \"20%\",\r\n          }}\r\n        >\r\n          {cityTableInfo !== \"\" ? (\r\n            <div\r\n              style={{\r\n                /* overflowY: \"scroll\", */ paddingTop: \"30px\",\r\n              }}\r\n            >\r\n              <h5>{cityTableInfo}</h5>\r\n              {\r\n                <TableByCitySide\r\n                  area={cityTableInfo}\r\n                  data={regionActiveCityList}\r\n                  summaryData={summaryData}\r\n                  onClickHandler={onClickHandlerCityTableSide}\r\n                />\r\n              }\r\n\r\n              <Link to={`/kaupunki/${cityTableInfo}`}>\r\n                Siirry katsomaan kaupungin tietoja\r\n              </Link>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\setUp\\dataSetUp.js",["117"],"import data_all_transactions from \"../assets/data/data_all_transactions.json\";\r\nimport zipCodeStructure from \"../assets/data/zipCodeStructure.json\";\r\n\r\n/*\r\n\r\nDataa filteröitynä käytettäväksi komponenteissa...\r\n\r\n*/\r\n\r\nconst cityList = (zipCodeStructureData = null) => {\r\n  if (zipCodeStructureData === null) {\r\n    zipCodeStructureData = zipCodeStructure.data;\r\n  }\r\n\r\n  let list = [];\r\n  for (const item in zipCodeStructureData) {\r\n    list.push(zipCodeStructureData[item].kaupunki);\r\n  }\r\n\r\n  list = [...new Set(list)];\r\n\r\n  return list.sort();\r\n};\r\n\r\nlet regionListData = [];\r\n\r\nconst regionList = () => {\r\n  if (regionListData.length > 0) return regionListData;\r\n  let zipCodeStructureData = zipCodeStructure.data;\r\n\r\n  let list = [];\r\n  for (const item in zipCodeStructureData) {\r\n    list.push(zipCodeStructureData[item].maakunta);\r\n  }\r\n\r\n  list = [...new Set(list)];\r\n  regionListData = list.sort();\r\n\r\n  return list.sort();\r\n};\r\n\r\nconst zipsByCity = () => {\r\n  let zipCodeStructureData = zipCodeStructure.data;\r\n  let list = [];\r\n  let cityListData = cityList();\r\n\r\n  for (const item in cityListData) {\r\n    let matches = zipCodeStructureData.filter(\r\n      (e) => e.kaupunki === cityListData[item]\r\n    );\r\n    list.push({ place: cityListData[item], data: matches });\r\n  }\r\n\r\n  return list.sort();\r\n};\r\n\r\nconst zipsByRegion = () => {\r\n  let zipCodeStructureData = zipCodeStructure.data;\r\n  let list = [];\r\n  let regionListData = regionList();\r\n\r\n  for (const item in regionListData) {\r\n    let matches = zipCodeStructureData.filter(\r\n      (e) => e.maakunta === regionListData[item]\r\n    );\r\n    list.push({ place: regionListData[item], data: matches });\r\n  }\r\n\r\n  return list.sort();\r\n};\r\n\r\nlet citiesByRegionData = [];\r\nconst citiesByRegion = () => {\r\n  if (citiesByRegionData.length > 0) return citiesByRegionData;\r\n  let zipCodeStructureData = zipCodeStructure.data;\r\n  let list = [];\r\n  let regionListData = regionList();\r\n\r\n  for (const item in regionListData) {\r\n    let cityList = [];\r\n    let matches = zipCodeStructureData.filter(\r\n      (e) => e.maakunta === regionListData[item]\r\n    );\r\n    for (const match in matches) {\r\n      cityList.push(matches[match].kaupunki);\r\n    }\r\n    cityList = [...new Set(cityList)];\r\n    list.push({ place: regionListData[item], data: cityList });\r\n  }\r\n  citiesByRegionData = list.sort();\r\n  return list.sort();\r\n};\r\n\r\nlet transactionsByCityData = [];\r\nconst transactionsByCity = () => {\r\n  if (transactionsByCityData.length > 0) {\r\n    return transactionsByCityData;\r\n  }\r\n  let list = [];\r\n  let cityListData = zipsByCity();\r\n\r\n  for (const item in cityListData) {\r\n    let dataElement = cityListData[item].data;\r\n    let matchesRes = [];\r\n    for (const element in dataElement) {\r\n      let matches = data_all_transactions.filter(\r\n        (e) => e.postinumero === dataElement[element].postinumero\r\n      );\r\n      for (const match in matches) {\r\n        matchesRes.push(matches[match]);\r\n      }\r\n    }\r\n\r\n    list.push({ place: cityListData[item].place, data: matchesRes });\r\n  }\r\n  transactionsByCityData = list.sort();\r\n  return list.sort();\r\n};\r\n\r\nconst transactionsByZip = () => {\r\n  let list = [];\r\n  let cityListData = zipsByCity();\r\n\r\n  for (const item in cityListData) {\r\n    let dataElement = cityListData[item].data;\r\n    let matchesRes = [];\r\n\r\n    for (const element in dataElement) {\r\n      let matches = data_all_transactions.filter(\r\n        (e) => e.postinumero === dataElement[element].postinumero\r\n      );\r\n\r\n      list.push({ place: dataElement[element].postinumero, data: matches });\r\n    }\r\n  }\r\n\r\n  return list.sort();\r\n};\r\n\r\nconst transactionsByRegion = async () => {\r\n  let list = [];\r\n  let regionListData = zipsByRegion();\r\n\r\n  for (const item in regionListData) {\r\n    let dataElement = regionListData[item].data;\r\n    let matchesRes = [];\r\n    for (const element in dataElement) {\r\n      let matches = data_all_transactions.filter(\r\n        (e) => e.postinumero === dataElement[element].postinumero\r\n      );\r\n      for (const match in matches) {\r\n        matchesRes.push(matches[match]);\r\n      }\r\n    }\r\n\r\n    list.push({ place: regionListData[item].place, data: matchesRes });\r\n  }\r\n\r\n  return list.sort();\r\n};\r\n\r\nlet summaryByRegionData = [];\r\nlet summaryByCityData = [];\r\nlet summaryByCountryData = [];\r\n\r\nconst summaryByArea = async (params) => {\r\n  //console.log(\"summaryByArea___________FUNKTIO\");\r\n  if (params.type === \"region\") {\r\n    if (summaryByRegionData.length !== 0) return summaryByRegionData;\r\n    //console.log(\"summaryByArea___________FUNKTIO__DATAHAKU\");\r\n    let data = await getData(\"transactionsByRegion\");\r\n    let res = await summaryByAreaCreateData(data);\r\n    summaryByRegionData = res;\r\n    return res;\r\n  } else if (params.type === \"city\") {\r\n    if (summaryByCityData.length !== 0) return summaryByCityData;\r\n    //console.log(\"summaryByArea___________FUNKTIO__DATAHAKU\");\r\n    let data = transactionsByCity();\r\n    let res = await summaryByAreaCreateData(data);\r\n    summaryByCityData = res;\r\n    return res;\r\n  } else if (params.type === \"country\") {\r\n    if (summaryByCountryData.length !== 0) return summaryByCountryData;\r\n    //console.log(\"summaryByArea___________FUNKTIO__DATAHAKU\");\r\n    let data = [{ place: \"Suomi\", data: data_all_transactions }];\r\n    let res = await summaryByAreaCreateData(data);\r\n    summaryByCountryData = res;\r\n    return res;\r\n  }\r\n  // return empty array if params do not match conditions\r\n  return [];\r\n};\r\n\r\nconst summaryByAreaCreateData = async (data) => {\r\n  let list = [];\r\n\r\n  let summaryList = [];\r\n\r\n  const roomSizes = [\"1\", \"2\", \"3\", \"4\"];\r\n\r\n  for (const region in data) {\r\n    let regionDataObj = {\r\n      1: [],\r\n      2: [],\r\n      3: [],\r\n      4: [],\r\n    };\r\n    let dataObject = {};\r\n\r\n    for (const roomSize in roomSizes) {\r\n      let dataBySize = data[region].data.filter(\r\n        (e) => e.huoneLukumaara === roomSizes[roomSize]\r\n      );\r\n\r\n      dataObject = {\r\n        hintaPerNelio: [],\r\n        /*   huoneLukumaara: [], */\r\n        pintaAla: [],\r\n        rakennusvuosi: [],\r\n        velatonHinta: [],\r\n      };\r\n      for (const item in dataBySize) {\r\n        let dataElement = dataBySize[item];\r\n\r\n        dataObject.hintaPerNelio.push(parseFloat(dataElement[\"hintaPerNelio\"]));\r\n        /* dataObject.huoneLukumaara.push(\r\n          parseFloat(dataElement[\"huoneLukumaara\"])\r\n        ); */\r\n        /* dataObject.kerros.push(dataElement[element][\"kerros\"]); */\r\n        dataObject.pintaAla.push(parseFloat(dataElement[\"pintaAla\"]));\r\n        dataObject.rakennusvuosi.push(parseFloat(dataElement[\"rakennusvuosi\"]));\r\n        dataObject.velatonHinta.push(parseFloat(dataElement[\"velatonHinta\"]));\r\n      }\r\n      regionDataObj[roomSizes[roomSize]] = dataObject; // .push(dataObject);\r\n    }\r\n\r\n    let dataAll = {\r\n      hintaPerNelio: [],\r\n      /* huoneLukumaara: [], */\r\n      pintaAla: [],\r\n      rakennusvuosi: [],\r\n      velatonHinta: [],\r\n    };\r\n\r\n    // combine roomSize level data into one object (in order to calculate values on total level)\r\n    for (const dataItem in regionDataObj) {\r\n      for (const objItem in dataAll) {\r\n        dataAll[objItem] = [\r\n          ...dataAll[objItem],\r\n          ...regionDataObj[dataItem][objItem],\r\n        ];\r\n      }\r\n    }\r\n\r\n    regionDataObj[\"kaikki\"] = dataAll;\r\n\r\n    list.push({\r\n      place: data[region].place,\r\n      data: regionDataObj,\r\n    });\r\n  }\r\n\r\n  for (const item in list) {\r\n    let regionDataObject = {};\r\n    let summaryObj = {};\r\n    for (const roomSize in list[item][\"data\"]) {\r\n      summaryObj = {\r\n        hintaPerNelio: { min: \"\", avg: \"\", max: \"\" },\r\n        /*  huoneLukumaara: { min: \"\", avg: \"\", max: \"\" }, */\r\n        pintaAla: { min: \"\", avg: \"\", max: \"\" },\r\n        rakennusvuosi: { min: \"\", avg: \"\", max: \"\" },\r\n        velatonHinta: { min: \"\", avg: \"\", max: \"\" },\r\n        tapahtumatYht: \"\",\r\n      };\r\n\r\n      /* kerros:{min:\"\", avg:\"\",max:\"\"}, */\r\n\r\n      for (const property in list[item][\"data\"][roomSize]) {\r\n        let listItemElement = list[item][\"data\"][roomSize][property];\r\n\r\n        if (listItemElement.length === 0) continue;\r\n\r\n        let total = 0;\r\n        let min = Math.min.apply(Math, listItemElement).toFixed(0);\r\n        let max = Math.max.apply(Math, listItemElement).toFixed(0);\r\n        let average = 0;\r\n\r\n        for (const value in listItemElement) {\r\n          total = total + listItemElement[value];\r\n        }\r\n        average = total / listItemElement.length;\r\n\r\n        summaryObj[property][\"min\"] = getFormattedValue(min, null, property);\r\n        summaryObj[property][\"max\"] = getFormattedValue(max, null, property);\r\n        summaryObj[property][\"avg\"] = getFormattedValue(\r\n          average,\r\n          null,\r\n          property\r\n        );\r\n      }\r\n      summaryObj[\"tapahtumatYht\"] = getFormattedValue(\r\n        list[item][\"data\"][roomSize][\"velatonHinta\"].length\r\n      );\r\n\r\n      regionDataObject[roomSize] = summaryObj;\r\n    }\r\n    summaryList.push({ place: list[item].place, data: regionDataObject });\r\n  }\r\n\r\n  //console.log(summaryList);\r\n\r\n  return summaryList;\r\n};\r\n\r\nconst getFormattedValue = (value, format = null, attribute = \"null\") => {\r\n  const formatObject = {\r\n    null: \"\",\r\n    hintaPerNelio: \"eur\",\r\n    velatonHinta: \"eur\",\r\n  };\r\n  if (format == null) format = formatObject[attribute];\r\n\r\n  if (format === \"eur\") {\r\n    return Number(value).toLocaleString(\"fi-FI\", {\r\n      style: \"currency\",\r\n      currency: \"EUR\",\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0,\r\n    });\r\n  } else {\r\n    return Number(value).toLocaleString(\"fi-FI\", {\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0,\r\n    });\r\n  }\r\n};\r\n\r\n// City data propsina sisään, dataa gridille ulos\r\nconst summaryByRooms = async (params) => {\r\n  let data = params.sales;\r\n  let roomDataObj = [];\r\n  let allRoomsDataObj = {\r\n    hintaPerNelio: [],\r\n    huoneLukumaara: [],\r\n    pintaAla: [],\r\n    rakennusvuosi: [],\r\n    velatonHinta: [],\r\n    kaikki: [],\r\n  };\r\n\r\n  const roomSizes = [\"1\", \"2\", \"3\", \"4\", \"Kaikki\"];\r\n\r\n  let dataObject = {};\r\n\r\n  for (const roomSize in roomSizes) {\r\n    let dataBySize = data.filter(\r\n      (e) => e.huoneLukumaara === roomSizes[roomSize]\r\n    );\r\n\r\n    dataObject = {\r\n      hintaPerNelio: [],\r\n      huoneLukumaara: [],\r\n      pintaAla: [],\r\n      rakennusvuosi: [],\r\n      velatonHinta: [],\r\n      kaikki: [],\r\n    };\r\n\r\n    for (const item in dataBySize) {\r\n      let dataElement = dataBySize[item];\r\n\r\n      dataObject.hintaPerNelio.push(parseFloat(dataElement[\"hintaPerNelio\"]));\r\n      dataObject.huoneLukumaara.push(parseFloat(dataElement[\"huoneLukumaara\"]));\r\n      dataObject.pintaAla.push(parseFloat(dataElement[\"pintaAla\"]));\r\n      dataObject.rakennusvuosi.push(parseFloat(dataElement[\"rakennusvuosi\"]));\r\n      dataObject.velatonHinta.push(parseFloat(dataElement[\"velatonHinta\"]));\r\n\r\n      // Add all info to \"kaikki\"\r\n      allRoomsDataObj.hintaPerNelio.push(\r\n        parseFloat(dataElement[\"hintaPerNelio\"])\r\n      );\r\n      allRoomsDataObj.huoneLukumaara.push(\r\n        parseFloat(dataElement[\"huoneLukumaara\"])\r\n      );\r\n      allRoomsDataObj.pintaAla.push(parseFloat(dataElement[\"pintaAla\"]));\r\n      allRoomsDataObj.rakennusvuosi.push(\r\n        parseFloat(dataElement[\"rakennusvuosi\"])\r\n      );\r\n      allRoomsDataObj.velatonHinta.push(\r\n        parseFloat(dataElement[\"velatonHinta\"])\r\n      );\r\n    }\r\n\r\n    let dataContent = \"\";\r\n\r\n    if (roomSize === \"0\") {\r\n      dataContent = {\r\n        place: \"Yksiöt\",\r\n        data: dataObject,\r\n      };\r\n    } else if (roomSize === \"1\") {\r\n      dataContent = {\r\n        place: \"Kaksiot\",\r\n        data: dataObject,\r\n      };\r\n    } else if (roomSize === \"2\") {\r\n      dataContent = {\r\n        place: \"Kolmiot\",\r\n        data: dataObject,\r\n      };\r\n    } else if (roomSize === \"3\") {\r\n      dataContent = {\r\n        place: \"4+ huonetta\",\r\n        data: dataObject,\r\n      };\r\n    } else {\r\n      dataContent = {\r\n        place: \"Kaikki asunnot\",\r\n        data: allRoomsDataObj,\r\n      };\r\n    }\r\n\r\n    roomDataObj.push(dataContent);\r\n  }\r\n\r\n  // Generoi \"kaikki\" gridille\r\n  for (const roomSizeGroup in roomDataObj) {\r\n    let summaryObj = {};\r\n\r\n    summaryObj = {\r\n      hintaPerNelio: { min: \"\", avg: \"\", max: \"\" },\r\n      pintaAla: { min: \"\", avg: \"\", max: \"\" },\r\n      rakennusvuosi: { min: \"\", avg: \"\", max: \"\" },\r\n      velatonHinta: { min: \"\", avg: \"\", max: \"\" },\r\n      tapahtumatYht: \"\",\r\n    };\r\n\r\n    for (const dataRow in roomDataObj[roomSizeGroup][\"data\"]) {\r\n      let dataRowValues = roomDataObj[roomSizeGroup][\"data\"][dataRow];\r\n\r\n      if (dataRowValues.length !== 0) {\r\n        let min = Math.min(...dataRowValues);\r\n        let max = Math.max(...dataRowValues);\r\n        let total = 0;\r\n        for (var i = 0; i < dataRowValues.length; i++) {\r\n          total += dataRowValues[i];\r\n        }\r\n        let average = total / dataRowValues.length;\r\n\r\n        summaryObj[dataRow] = {\r\n          min: getFormattedValue(min, null, dataRow),\r\n          max: getFormattedValue(max, null, dataRow),\r\n          avg: getFormattedValue(average, null, dataRow),\r\n        };\r\n      }\r\n    }\r\n\r\n    summaryObj[\"tapahtumatYht\"] =\r\n      roomDataObj[roomSizeGroup][\"data\"][\"huoneLukumaara\"].length;\r\n    roomDataObj[roomSizeGroup][\"data\"][\"kaikki\"] = summaryObj;\r\n  }\r\n\r\n  return roomDataObj;\r\n};\r\n\r\n// alusta data aluksi ja tallenna muuttujiin niin ei tarvii suorittaa monta kertaa samaa toimintoa jos voi hyödyntää samaa dataa filterointien yhteydessä.\r\nlet transactionsByRegionData = [];\r\n\r\nexport default async function getData(structure, params) {\r\n  if (structure === \"cityList\") return cityList();\r\n  if (structure === \"regionList\") return regionList();\r\n  if (structure === \"citiesByRegion\") return citiesByRegion();\r\n  if (structure === \"zipsByCity\") return zipsByCity();\r\n  if (structure === \"zipsByRegion\") return zipsByRegion();\r\n  if (structure === \"transactionsByCity\") return transactionsByCity();\r\n  if (structure === \"transactionsByZip\") return transactionsByZip();\r\n  if (structure === \"transactionsByRegion\") {\r\n    if (transactionsByRegionData.length === 0) {\r\n      transactionsByRegionData = await transactionsByRegion();\r\n      return transactionsByRegionData;\r\n    } else {\r\n      return transactionsByRegionData;\r\n    }\r\n  }\r\n\r\n  if (structure === \"summaryByArea\") return await summaryByArea(params);\r\n  if (structure === \"summaryByRooms\") return await summaryByRooms(params);\r\n}\r\n","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\header\\Header.js",["118","119"],"import Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Search from \"./Search\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function Header() {\r\n  let history = useHistory();\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  const [searchFormActive, setSearchFormActive] = useState(false);\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [searching, setSearching] = useState(false);\r\n  const [showAllResults, setShowAllResults] = useState(false);\r\n\r\n  const handleSearchForm = (e) => {\r\n    try {\r\n      setSearchValue(e.target.value);\r\n      setSearching(true);\r\n    } catch (error) {\r\n      setSearchValue(\"\");\r\n      setSearching(false);\r\n    }\r\n  };\r\n\r\n  // On blurring search field close the result list\r\n  const handleSearchFormBlur = (e) => {\r\n    try {\r\n      // If user clicked \"Näytä lisää\" /\"Näytä vähemmän\" ->update search result list\r\n      if (e.relatedTarget.id === \"showAllSearchResultsToggle\") {\r\n        setShowAllResults((state) => !state);\r\n        document.getElementById(\"searchFormControl\").focus();\r\n        return;\r\n      }\r\n    } catch (error) {}\r\n\r\n    let idString = [\"init\"];\r\n\r\n    try {\r\n      let id = e.relatedTarget.id;\r\n      idString = id.split(\":\");\r\n    } catch (error) {}\r\n\r\n    setSearchFormActive(false);\r\n    setSearchValue(\"\");\r\n    setShowAllResults(false);\r\n\r\n    if (idString[0] === \"headerLink\") {\r\n      history.push(idString[1]);\r\n    }\r\n  };\r\n\r\n  const handleSearchFormClick = (e) => {\r\n    setSearchFormActive(true);\r\n  };\r\n\r\n  const getSearchResultListing = (showAll) => {\r\n    let keys = Object.keys(searchResults);\r\n    let resArr = [];\r\n\r\n    let limit = 9;\r\n\r\n    let index = 0;\r\n    for (const key in keys) {\r\n      for (const result in searchResults[keys[key]]) {\r\n        if (result > limit && showAll === false) {\r\n          resArr.push(\r\n            <ListGroup.Item\r\n              key={\"searchResult-show-more\"}\r\n              id={\"showAllSearchResultsToggle\"}\r\n              as={Link}\r\n              to={\"\"}\r\n            >\r\n              Näytä lisää..\r\n            </ListGroup.Item>\r\n          );\r\n          return resArr;\r\n        }\r\n\r\n        resArr.push(\r\n          <ListGroup.Item\r\n            as={Link}\r\n            id={`headerLink:/${keys[key].toLowerCase()}/${\r\n              searchResults[keys[key]][result]\r\n            }`}\r\n            to={`/${keys[key].toLowerCase()}/${\r\n              searchResults[keys[key]][result]\r\n            }`}\r\n            key={\"searchResult-\" + result}\r\n          >\r\n            {keys[key] + \" : \" + searchResults[keys[key]][result]}\r\n          </ListGroup.Item>\r\n        );\r\n      }\r\n\r\n      index = index + 1;\r\n    }\r\n    if (resArr.length > 10) {\r\n      resArr.push(\r\n        <ListGroup.Item\r\n          key={\"searchResult-show-more\"}\r\n          id={\"showAllSearchResultsToggle\"}\r\n          as={Link}\r\n          to={\"\"}\r\n        >\r\n          Näytä vähemmän..\r\n        </ListGroup.Item>\r\n      );\r\n    }\r\n\r\n    return resArr;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navbar bg=\"light\" expand=\"lg\">\r\n        <Navbar.Brand as={Link} to=\"/\">\r\n          Kauppahinnat.fi\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <div style={{ marginLeft: \"10px\" }}>\r\n            <Form inline>\r\n              <FormControl\r\n                onChange={handleSearchForm}\r\n                type=\"text\"\r\n                placeholder=\"Etsi kaupunki tai postinumero...\"\r\n                className=\"mr-sm-2\"\r\n                value={searchValue}\r\n                onBlur={handleSearchFormBlur}\r\n                onClick={handleSearchFormClick}\r\n                id=\"searchFormControl\"\r\n              />\r\n\r\n              <Search\r\n                searchValue={searchValue}\r\n                setSearchResults={setSearchResults}\r\n                setSearching={setSearching}\r\n              />\r\n            </Form>\r\n\r\n            {searchFormActive && searching && (\r\n              <ListGroup id=\"searchResultList\">\r\n                {searching === true ? (\r\n                  <ListGroup.Item key={\"searchResult-searching\"}>\r\n                    Hakee\r\n                  </ListGroup.Item>\r\n                ) : null}\r\n              </ListGroup>\r\n            )}\r\n\r\n            {searchFormActive && !searching && (\r\n              <ListGroup id=\"searchResultList\">\r\n                {searchResults == null ? (\r\n                  <ListGroup.Item key={\"searchResult-none\"}>\r\n                    Ei tuloksia\r\n                  </ListGroup.Item>\r\n                ) : (\r\n                  getSearchResultListing(showAllResults).map((e) => e)\r\n                )}\r\n              </ListGroup>\r\n            )}\r\n          </div>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\home\\Grid.js",[],"C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\header\\Search.js",["120"],"import { useEffect } from \"react\";\r\nimport zipCodeStructure from \"../../assets/data/zipCodeStructure.json\";\r\n\r\nexport default function Search({\r\n  searchValue,\r\n  setSearchResults,\r\n  setSearching,\r\n}) {\r\n  useEffect(() => {\r\n    if (searchValue === \"\") {\r\n      setSearchResults([]);\r\n      setSearching(false);\r\n      return null;\r\n    }\r\n\r\n    let matchesCity = zipCodeStructure.data.filter((e) =>\r\n      e.kaupunki.toLowerCase().includes(searchValue.toLowerCase())\r\n    );\r\n\r\n    let cities = [];\r\n    for (const city in matchesCity) {\r\n      cities.push(matchesCity[city].kaupunki);\r\n    }\r\n    cities = [...new Set(cities)];\r\n\r\n    let matchesZip = zipCodeStructure.data.filter((e) =>\r\n      e.postinumero.includes(searchValue)\r\n    );\r\n\r\n    let zips = [];\r\n    for (const zip in matchesZip) {\r\n      zips.push(matchesZip[zip].postinumero);\r\n    }\r\n    zips = [...new Set(zips)];\r\n\r\n    if (cities.length === 0 && zips.length === 0) {\r\n      setSearchResults(null);\r\n    } else {\r\n      setSearchResults({ Kaupunki: cities, Postinumero: zips });\r\n    }\r\n    setSearching(false);\r\n  }, [searchValue]);\r\n\r\n  return null;\r\n}\r\n","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\views\\Table.js",["121"],"import { useTable, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table'\r\nimport React, { useState, useEffect } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n  // Vilkuiltu täältä mallia: https://www.freakyjolly.com/react-table-tutorial/\r\n  export default function Table(props) {\r\n    const [data, setData] = useState(props.sales);\r\n    \r\n    // Vakikolumnit kauppatiedoille\r\n    const columns = React.useMemo(\r\n        () => [\r\n            // {\r\n            //     Header: 'Kaupunki',\r\n            //     accessor: 'kaupunki',\r\n            // },\r\n            {\r\n                Header: 'Kaupunginosa',\r\n                accessor: 'kaupunginosa',\r\n            },\r\n            // {\r\n            //     Header: 'Postinumero',\r\n            //     accessor: 'postinumero',\r\n            // },\r\n            // {\r\n            //     Header: 'Huonelukumäärä',\r\n            //     accessor: 'huoneLukumaara',\r\n            //     Filter: SelectColumnFilter,\r\n            //     filter: 'equals'\r\n            // },\r\n            {\r\n                Header: 'Huoneisto',\r\n                accessor: 'huoneisto',\r\n            },\r\n            {\r\n                Header: 'Talotyyppi',\r\n                accessor: 'talotyyppi',\r\n                Filter: SelectColumnFilter,\r\n                filter: 'equals',\r\n            },\r\n            {\r\n                Header: 'Pinta-ala',\r\n                accessor: 'pintaAla',\r\n                // Rangefiltteri ei toimi tässä, koska Suomilocale floateille on pilkku eikä piste.\r\n                // JavaScript ei osaa tehdä käännöstä oikein, enkä tähän väliin ehdi asiaa selvitellä.\r\n                // Filter: NumberRangeColumnFilter,\r\n                // filter: 'between',\r\n                Filter: SelectColumnFilter,\r\n                filter: 'equals',\r\n            },\r\n            {\r\n                Header: 'Velaton hinta',\r\n                accessor: 'velatonHinta',\r\n                Filter: NumberRangeColumnFilter,\r\n                filter: 'between',\r\n            },\r\n            {\r\n                Header: 'Hinta per neliö',\r\n                accessor: 'hintaPerNelio',\r\n                Filter: NumberRangeColumnFilter,\r\n                filter: 'between',\r\n            },\r\n            {\r\n                Header: 'Rakennusvuosi',\r\n                accessor: 'rakennusvuosi',\r\n                Filter: NumberRangeColumnFilter,\r\n                filter: 'between',\r\n            },\r\n            {\r\n                Header: 'Kerros',\r\n                accessor: 'kerros',\r\n                Filter: SelectColumnFilter,\r\n                filter: 'equals',\r\n            },\r\n            {\r\n                Header: 'Hissi',\r\n                accessor: 'hissi',\r\n                Filter: SelectColumnFilter,\r\n                filter: 'equals',\r\n            },\r\n            {\r\n                Header: 'Kunto',\r\n                accessor: 'kunto',\r\n                Filter: SelectColumnFilter,\r\n                filter: 'equals',\r\n            },\r\n            {\r\n                Header: 'Tontti',\r\n                accessor: 'tontti',\r\n                Filter: SelectColumnFilter,\r\n                filter: 'equals',\r\n            },\r\n            {\r\n                Header: 'Energialuokka',\r\n                accessor: 'energialuokka',\r\n                Filter: SelectColumnFilter,\r\n                filter: 'equals',\r\n            }\r\n        ], []\r\n    )\r\n\r\n    const filterTypes = React.useMemo(\r\n        () => ({\r\n            text: (rows, id, filterValue) => {\r\n                return rows.filter(row => {\r\n                const rowValue = row.values[id]\r\n                return rowValue !== undefined\r\n                    ? String(rowValue)\r\n                        .split(',')[0]\r\n                        .toLowerCase()\r\n                        .startsWith(String(filterValue).toLowerCase())\r\n                    : true\r\n                })\r\n            },\r\n        }),\r\n        []\r\n      )\r\n\r\n    const defaultColumn = React.useMemo(\r\n        () => ({\r\n            // Vakiofiltteri kentille\r\n            Filter: DefaultColumnFilter,\r\n        }),\r\n        []\r\n      )\r\n  \r\n    const { \r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        state,\r\n        visibleColumns,\r\n        preGlobalFilteredRows,\r\n        setGlobalFilter, \r\n    } = useTable({\r\n            columns,\r\n            data,\r\n            defaultColumn,\r\n            filterTypes, \r\n    },\r\n    useFilters,\r\n    useGlobalFilter,\r\n    );\r\n\r\n    useEffect(() => {\r\n        let roomInfo = \"Kaikki\";\r\n        let salesData = [];\r\n\r\n        // Tee asuntokoon filtteröintiparametri\r\n        if(props.room === \"Yksiöt\"){\r\n            roomInfo = \"1\";\r\n        }\r\n        else if(props.room === \"Kaksiot\"){\r\n            roomInfo = \"2\";\r\n        }\r\n        else if(props.room === \"Kolmiot\"){\r\n            roomInfo = \"3\";\r\n        }\r\n        else if(props.room === \"4+ huonetta\"){\r\n            roomInfo = \"4+\";\r\n        }\r\n        \r\n        // Filtteröi parametrin mukaan dataa\r\n        if (roomInfo === \"Kaikki\"){\r\n            salesData = props.sales;\r\n        }\r\n        else{\r\n            salesData = props.sales.filter(\r\n                (e) => e.huoneLukumaaraV2 === roomInfo);\r\n        }\r\n        \r\n        setData(salesData);\r\n    }, [props.room]);\r\n\r\n    /********** FILTTERIT ***********/\r\n    // https://codesandbox.io/s/github/tannerlinsley/react-table/tree/master/examples/filtering?file=/src/App.js:6247-6319\r\n\r\n    // Vakiofiltteri taulukolle\r\n    function GlobalFilter({\r\n        preGlobalFilteredRows,\r\n        globalFilter,\r\n        setGlobalFilter,\r\n    }) {\r\n        const count = preGlobalFilteredRows.length\r\n        const [value, setValue] = React.useState(globalFilter)\r\n        const onChange = useAsyncDebounce(value => {\r\n          setGlobalFilter(value || undefined)\r\n        }, 200)\r\n      \r\n        return (\r\n          <span>\r\n            Hae:{' '}\r\n            <input\r\n              value={value || \"\"}\r\n              onChange={e => {\r\n                setValue(e.target.value);\r\n                onChange(e.target.value);\r\n              }}\r\n              placeholder={`${count} asuntokaupasta...`}\r\n              style={{\r\n                fontSize: '1rem',\r\n                border: '0',\r\n              }}\r\n            />\r\n          </span>\r\n        )\r\n    }\r\n\r\n    // Vakiofiltterin määritys\r\n    function DefaultColumnFilter({\r\n        column: { filterValue, preFilteredRows, setFilter },\r\n    }) {\r\n        return (\r\n            <input\r\n                value={filterValue || ''}\r\n                onChange={e => {\r\n                setFilter(e.target.value || undefined)\r\n                }}\r\n                placeholder={`Hae...`}\r\n            />\r\n        )\r\n    }\r\n\r\n    // Dropdown-filtteri columnin arvoille; toimii dynaamisesti\r\n    function SelectColumnFilter({\r\n        column: { filterValue, setFilter, preFilteredRows, id },\r\n    }) {\r\n        // Selvitetään fiiltteröinnin valintavaihtoehdot preFilteredRows:n avulla\r\n        const options = React.useMemo(() => {\r\n            const options = new Set()\r\n            preFilteredRows.forEach(row => {\r\n                options.add(row.values[id])\r\n            })\r\n\r\n            return [...options.values()]\r\n        }, [id, preFilteredRows])\r\n    \r\n        // Renderöidään monivalinta\r\n        return (\r\n            <select\r\n                value={filterValue}\r\n                onChange={e => {\r\n                setFilter(e.target.value || undefined)\r\n                }}\r\n            >\r\n                <option value=\"\">Kaikki</option>\r\n                {options.map((option, i) => (\r\n                <option key={i} value={option}>\r\n                    {option}\r\n                </option>\r\n                ))}\r\n            </select>\r\n        )\r\n    }\r\n\r\n    // Filtteri, johon asetetaan numeroarvoina lähtöarvo ja päättymisarvo\r\n    function NumberRangeColumnFilter({\r\n        column: { filterValue = [], setFilter },\r\n    }) {\r\n        return (\r\n            <div\r\n                style={{\r\n                display: 'flex',\r\n                }}\r\n            >\r\n            <input\r\n                value={filterValue[0] || ''}\r\n                type=\"number\"\r\n                onChange={e => {\r\n                    const val = e.target.value;\r\n                    setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\r\n                }}\r\n                placeholder={`Mistä`}\r\n                style={{\r\n                    width: '65px',\r\n                    marginRight: '0.5rem',\r\n                }}\r\n            />\r\n            -\r\n            <input\r\n                value={filterValue[1] || ''}\r\n                type=\"number\"\r\n                onChange={e => {\r\n                    const val = e.target.value;\r\n                    setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\r\n                }}\r\n                placeholder={`Mihin`}\r\n                style={{\r\n                    width: '65px',\r\n                    marginLeft: '0.5rem',\r\n                }}\r\n            />\r\n          </div>\r\n        )\r\n    }    \r\n    /********** FILTTERIT PÄÄTTYY ***********/\r\n  \r\n    // Generoidaan taulu lennossa oikean kokoseksi\r\n    return (\r\n        <table className=\"table\" {...getTableProps()}>\r\n            <thead>\r\n                <tr>\r\n                    <th\r\n                    colSpan={visibleColumns.length}\r\n                    style={{\r\n                        textAlign: 'left',\r\n                    }}\r\n                    >\r\n                    <GlobalFilter\r\n                        preGlobalFilteredRows={preGlobalFilteredRows}\r\n                        globalFilter={state.globalFilter}\r\n                        setGlobalFilter={setGlobalFilter}\r\n                    />\r\n                    </th>\r\n                </tr>\r\n                {headerGroups.map(headerGroup => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map(column => (\r\n                            <th {...column.getHeaderProps()}>\r\n                                {column.render('Header')}\r\n                                <div>\r\n                                    {column.canFilter ? column.render('Filter') : null}\r\n                                </div>\r\n                            </th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n                \r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row)\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map(cell => {\r\n                                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                            })}\r\n                        </tr>\r\n                    )\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    )\r\n  }","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\home\\InfoView.js",["122","123","124"],"import { useState, useEffect } from \"react\";\r\n\r\nexport default function InfoView({ area, data, width }) {\r\n  const headers = [\"\", \"Yksiöt\", \"Kaksiot\", \"Kolmiot\", \"4h+\", \"kaikki\"];\r\n\r\n  const [rows, setRows] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let areaData = data.filter((d) => d.place === area);\r\n\r\n    if (areaData.length === 0) {\r\n      return null;\r\n    }\r\n    let tableData = areaData[0].data;\r\n\r\n    let rowNames = [];\r\n    Object.keys(tableData[\"kaikki\"]).map(function (item) {\r\n      rowNames.push(item);\r\n    });\r\n\r\n    let rows = [];\r\n\r\n    for (const rowName in rowNames) {\r\n      rows.push([rowNames[rowName]]);\r\n      Object.keys(tableData).map(function (item) {\r\n        rows[rowName].push(tableData[item][rowNames[rowName]]);\r\n      });\r\n    }\r\n\r\n    setRows(rows);\r\n  }, [area]);\r\n\r\n  return (\r\n    <div style={{ width: width, marginLeft: \"10px\" }}>\r\n      <table className=\"infoViewTable\" style={{ width: \"100%\" }}>\r\n        <thead>\r\n          <tr key={\"InfoViewHeader_header_tr\"}>\r\n            {headers.map((header, ind) => (\r\n              <th key={\"InfoViewHeader\" + ind + \"-\" + header}>{header}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        {rows.map((row, rowIndex) => {\r\n          return (\r\n            <tbody key={\"InfoViewHeader_tbody-\" + rowIndex}>\r\n              <tr\r\n                className=\"regionInfoViewTableRow_Title\"\r\n                key={\"regionInfoViewTableRow_Title\" + rowIndex}\r\n              >\r\n                <td\r\n                  colSpan={headers.length}\r\n                  key={\"InfoViewTableRow_Title_TD\" + rowIndex}\r\n                >\r\n                  {row[0]}\r\n                </td>\r\n              </tr>\r\n              <tr key={\"InfoViewTableRow_RowNames\" + rowIndex}>\r\n                {row.map((r, rIndex) =>\r\n                  //First item is row name -> return row name and min/avg/max rows\r\n                  rIndex === 0 ? (\r\n                    <td key={\"InfoViewTableRow_\" + rowIndex + \"_\" + rIndex}>\r\n                      <div\r\n                        key={\"InfoViewTableRow_div\" + rowIndex + \"_\" + rIndex}\r\n                      >\r\n                        {/* <p> */} {/* {r} <br /> */}\r\n                        {typeof row[1] === \"object\"\r\n                          ? Object.keys(row[1]).map((key, index) => {\r\n                              return (\r\n                                <p\r\n                                  key={\r\n                                    \"InfoViewTableRow_name_p\" +\r\n                                    rowIndex +\r\n                                    key +\r\n                                    rIndex +\r\n                                    index\r\n                                  }\r\n                                  style={{ lineHeight: \"0\" }}\r\n                                >\r\n                                  {key}\r\n                                </p>\r\n                              );\r\n                            })\r\n                          : \"määrä\"}\r\n                        {/*  </p> */}\r\n                      </div>\r\n                    </td>\r\n                  ) : (\r\n                    // remaining items include data -> loop min, avg, and max values:\r\n                    <td key={\"InfoViewTableRow_\" + rowIndex + \"_\" + rIndex}>\r\n                      <div\r\n                        key={\"InfoViewTableRow_div\" + rowIndex + \"_\" + rIndex}\r\n                      >\r\n                        {typeof r === \"object\"\r\n                          ? Object.keys(r).map((key, index) => {\r\n                              return (\r\n                                <p\r\n                                  key={\r\n                                    \"InfoViewTableRow_val_p\" +\r\n                                    rowIndex +\r\n                                    rIndex +\r\n                                    key +\r\n                                    index\r\n                                  }\r\n                                  style={{ lineHeight: \"0\" }}\r\n                                >\r\n                                  {r[key]}\r\n                                </p>\r\n                              );\r\n                            })\r\n                          : r}\r\n                      </div>\r\n                    </td>\r\n                  )\r\n                )}\r\n              </tr>\r\n            </tbody>\r\n          );\r\n        })}\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\home\\TableByCity.js",["125","126","127","128"],"import { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ResponsiveBar } from \"@nivo/bar\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport default function TableByCity({\r\n  area,\r\n  data,\r\n  summaryData,\r\n  onClickHandler,\r\n}) {\r\n  const [barData, setBarData] = useState([]);\r\n  const [barDataOthers, setBarDataOthers] = useState([]);\r\n  const [showOthers, setShowOthers] = useState(false);\r\n  const [noTransactionsList, setNoTransactionsList] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const showOthersButtonHandler = (e) => {\r\n    setShowOthers((state) => !state);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setShowOthers(false);\r\n  }, [area]);\r\n\r\n  useEffect(() => {\r\n    if (area === \"Suomi\") return null;\r\n    let barDataArr = [];\r\n    let noTransactionsListArray = [];\r\n    let othersArray = [];\r\n\r\n    let totalTransactions = 0;\r\n\r\n    try {\r\n      let regiondData = summaryData.filter((e) => e.place == area)[0];\r\n      totalTransactions = regiondData.data.kaikki.tapahtumatYht;\r\n\r\n      totalTransactions = parseInt(totalTransactions.replace(/\\s/g, \"\"));\r\n    } catch (error) {}\r\n\r\n    let objectOthers = {\r\n      place: \"muut\",\r\n      yksiö: 0,\r\n      kaksio: 0,\r\n      kolmio: 0,\r\n      neliö: 0,\r\n    };\r\n\r\n    data.map((d) => {\r\n      if (parseInt(d.data[\"kaikki\"].tapahtumatYht.replace(/\\s/g, \"\")) < 1) {\r\n        noTransactionsListArray.push(d.place);\r\n      } else if (\r\n        parseInt(d.data[\"kaikki\"].tapahtumatYht.replace(/\\s/g, \"\")) >\r\n        0.02 * totalTransactions\r\n      ) {\r\n        barDataArr.push({\r\n          place: d.place,\r\n          yksiö: parseInt(d.data[1].tapahtumatYht.replace(/\\s/g, \"\")),\r\n          kaksio: parseInt(d.data[2].tapahtumatYht.replace(/\\s/g, \"\")),\r\n          kolmio: parseInt(d.data[3].tapahtumatYht.replace(/\\s/g, \"\")),\r\n          neliö: parseInt(d.data[4].tapahtumatYht.replace(/\\s/g, \"\")),\r\n        });\r\n      } else {\r\n        othersArray.push({\r\n          place: d.place,\r\n          yksiö: parseInt(d.data[1].tapahtumatYht.replace(/\\s/g, \"\")),\r\n          kaksio: parseInt(d.data[2].tapahtumatYht.replace(/\\s/g, \"\")),\r\n          kolmio: parseInt(d.data[3].tapahtumatYht.replace(/\\s/g, \"\")),\r\n          neliö: parseInt(d.data[4].tapahtumatYht.replace(/\\s/g, \"\")),\r\n        });\r\n        objectOthers[\"yksiö\"] =\r\n          objectOthers[\"yksiö\"] +\r\n          parseInt(d.data[1].tapahtumatYht.replace(/\\s/g, \"\"));\r\n        objectOthers[\"kaksio\"] =\r\n          objectOthers[\"kaksio\"] +\r\n          parseInt(d.data[2].tapahtumatYht.replace(/\\s/g, \"\"));\r\n        objectOthers[\"kolmio\"] =\r\n          objectOthers[\"kolmio\"] +\r\n          parseInt(d.data[3].tapahtumatYht.replace(/\\s/g, \"\"));\r\n        objectOthers[\"neliö\"] =\r\n          objectOthers[\"neliö\"] +\r\n          parseInt(d.data[4].tapahtumatYht.replace(/\\s/g, \"\"));\r\n      }\r\n    });\r\n\r\n    if (othersArray.length === 1) {\r\n      barDataArr.push(othersArray[0]);\r\n      setBarDataOthers([]);\r\n    } else if (othersArray.length > 1) {\r\n      barDataArr.push(objectOthers);\r\n      setBarDataOthers(othersArray);\r\n    } else {\r\n      setBarDataOthers([]);\r\n    }\r\n\r\n    setBarData(barDataArr);\r\n\r\n    setNoTransactionsList(noTransactionsListArray);\r\n\r\n    setLoading(false);\r\n  }, [area, summaryData, data]);\r\n\r\n  if (area === \"Suomi\") {\r\n    return <div style={{ height: \"500px\" }}>Valitse maakunta</div>;\r\n  }\r\n  if (loading === true) {\r\n    return (\r\n      <div style={{ height: \"500px\" }}>Vain hetki, ladataan lisää tietoa..</div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={{ height: \"500px\" }}>\r\n      {barDataOthers.length > 0 && (\r\n        <div style={{ height: \"50px\", textAlign: \"left\", paddingLeft: \"10%\" }}>\r\n          <Button variant=\"info\" onClick={showOthersButtonHandler}>\r\n            {\" \"}\r\n            {showOthers === false ? \"Näytä muut\" : \"Palaa takaisin\"}{\" \"}\r\n          </Button>\r\n        </div>\r\n      )}\r\n      <div style={{ height: \"350px\" }}>\r\n        <ResponsiveBar\r\n          data={showOthers === false ? barData : barDataOthers}\r\n          keys={[\"yksiö\", \"kaksio\", \"kolmio\", \"neliö\"]}\r\n          indexBy=\"place\"\r\n          onClick={(node) => {\r\n            if (node.indexValue === \"muut\") return null;\r\n            onClickHandler(node);\r\n          }}\r\n          margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\r\n          padding={0.3}\r\n          valueScale={{ type: \"linear\" }}\r\n          indexScale={{ type: \"band\", round: true }}\r\n          colors={{ scheme: \"nivo\" }}\r\n          defs={[\r\n            {\r\n              id: \"dots\",\r\n              type: \"patternDots\",\r\n              background: \"inherit\",\r\n              color: \"#38bcb2\",\r\n              size: 4,\r\n              padding: 1,\r\n              stagger: true,\r\n            },\r\n            {\r\n              id: \"lines\",\r\n              type: \"patternLines\",\r\n              background: \"inherit\",\r\n              color: \"#eed312\",\r\n              rotation: -45,\r\n              lineWidth: 6,\r\n              spacing: 10,\r\n            },\r\n          ]}\r\n          fill={[\r\n            {\r\n              match: {\r\n                id: \"fries\",\r\n              },\r\n              id: \"dots\",\r\n            },\r\n            {\r\n              match: {\r\n                id: \"sandwich\",\r\n              },\r\n              id: \"lines\",\r\n            },\r\n          ]}\r\n          borderColor={{ from: \"color\", modifiers: [[\"darker\", 1.6]] }}\r\n          axisTop={null}\r\n          axisRight={null}\r\n          axisBottom={{\r\n            tickSize: 5,\r\n            tickPadding: 5,\r\n            tickRotation: 0,\r\n            legend: \"kaupunki\",\r\n            legendPosition: \"middle\",\r\n            legendOffset: 32,\r\n          }}\r\n          axisLeft={{\r\n            tickSize: 5,\r\n            tickPadding: 5,\r\n            tickRotation: 0,\r\n            legend: \"kpl\",\r\n            legendPosition: \"middle\",\r\n            legendOffset: -40,\r\n          }}\r\n          labelSkipWidth={12}\r\n          labelSkipHeight={12}\r\n          labelTextColor={{ from: \"color\", modifiers: [[\"darker\", 1.6]] }}\r\n          legends={[\r\n            {\r\n              dataFrom: \"keys\",\r\n              anchor: \"bottom-right\",\r\n              direction: \"column\",\r\n              justify: false,\r\n              translateX: 120,\r\n              translateY: 0,\r\n              itemsSpacing: 2,\r\n              itemWidth: 100,\r\n              itemHeight: 20,\r\n              itemDirection: \"left-to-right\",\r\n              itemOpacity: 0.85,\r\n              symbolSize: 20,\r\n              effects: [\r\n                {\r\n                  on: \"hover\",\r\n                  style: {\r\n                    itemOpacity: 1,\r\n                  },\r\n                },\r\n              ],\r\n            },\r\n          ]}\r\n          animate={true}\r\n          motionStiffness={90}\r\n          motionDamping={15}\r\n        />\r\n      </div>\r\n      {noTransactionsList.length > 0 && (\r\n        <div>\r\n          Kaupungit, joissa ei raportoituja kauppoja:{\" \"}\r\n          {noTransactionsList.map((e, index) => {\r\n            if (index === noTransactionsList.length - 1) {\r\n              return e + \".\";\r\n            } else {\r\n              return e + \", \";\r\n            }\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n{\r\n  /* <div style={{ maxHeight: \"280px\", overflowY: \"scroll\" }}>\r\n      {data.map((e) => (\r\n        <div onClick={onClickHandler} key={e.place}>\r\n          <Link to={`kaupunki/${e.place}`}> {e.place}: </Link> {e.data.length}\r\n        </div>\r\n      ))}\r\n    </div> */\r\n}\r\n","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\home\\TableByCitySide.js",["129","130","131","132","133","134","135","136","137","138","139","140","141"],"import { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ResponsiveBar } from \"@nivo/bar\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport default function TableByCitySide({\r\n  area,\r\n  data,\r\n  summaryData,\r\n  onClickHandler,\r\n}) {\r\n  const [barData, setBarData] = useState([]);\r\n  const [barDataOthers, setBarDataOthers] = useState([]);\r\n  const [showOthers, setShowOthers] = useState(false);\r\n  const [noTransactionsList, setNoTransactionsList] = useState([]);\r\n\r\n  const showOthersButtonHandler = (e) => {\r\n    setShowOthers((state) => !state);\r\n  };\r\n\r\n  useEffect(() => {}, [area, summaryData, data]);\r\n\r\n  let dataObj = {};\r\n  let itemsArr = [];\r\n\r\n  try {\r\n    dataObj = data.filter((e) => e.place === area)[0].data.kaikki;\r\n\r\n    Object.keys(dataObj).map((key) => {\r\n      if (dataObj[key].avg !== undefined) {\r\n        itemsArr.push(key + \": \" + dataObj[key].avg);\r\n      } else {\r\n        itemsArr.push(key + \": \" + dataObj[key]);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <h6 style={{ paddingTop: \"15px\" }}>kaupungin keskiarvot:</h6>\r\n      {itemsArr.map((e, i) => (\r\n        <p key={\"TableCitySide-\" + i}>{e}</p>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n{\r\n  /* <div style={{ maxHeight: \"280px\", overflowY: \"scroll\" }}>\r\n      {data.map((e) => (\r\n        <div onClick={onClickHandler} key={e.place}>\r\n          <Link to={`kaupunki/${e.place}`}> {e.place}: </Link> {e.data.length}\r\n        </div>\r\n      ))}\r\n    </div> */\r\n}\r\n","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\components\\home\\RegionHistoryGraph.js",["142","143","144","145","146","147"],"import { useEffect, useState } from \"react\";\r\n\r\nimport pxwebGetData from \"../../setUp/PXWeb/getData\";\r\nimport { ResponsiveLine } from \"@nivo/line\";\r\n\r\nimport getData from \"../../setUp/dataSetUp\";\r\n\r\nexport default function RegionHistoryGraph() {\r\n  console.log(\"RegionBarLine__\");\r\n  const [regionData, setRegionData] = useState([]);\r\n  const [regionDataActive, setRegionDataActive] = useState([]);\r\n  const [regiondDataHidden, setRegionDataHidden] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      let res = await pxwebGetData(\"summaryByRegion\");\r\n\r\n      let data = [];\r\n      let dataObject = {};\r\n      for (const region in res[0][\"data\"]) {\r\n        dataObject[res[0][\"data\"][region].place] = { data: [] };\r\n      }\r\n\r\n      for (const year in res) {\r\n        let yearValue = res[year][\"year\"];\r\n        for (const region in res[year][\"data\"]) {\r\n          try {\r\n            dataObject[res[year][\"data\"][region].place].data.push({\r\n              x: yearValue,\r\n              y:\r\n                res[year][\"data\"][region][\"data\"][\"Talotyypit yhteensä\"][\r\n                  \"Rakennusvuodet yhteensä\"\r\n                ][yearValue][\"avg_Neliöhinta (EUR/m2)\"],\r\n            });\r\n          } catch (error) {\r\n            console.log(\"ERROR_NOT_FOUND---  \" + error);\r\n          }\r\n        }\r\n      }\r\n      console.log(dataObject);\r\n      console.log(\"dataObject__RES__\");\r\n      let keys = Object.keys(dataObject);\r\n      for (const key in keys) {\r\n        if (dataObject[keys[key]].data.length > 0) {\r\n          console.log(dataObject[keys[key]]);\r\n          console.log(keys[key]);\r\n          console.log(\"KEY__TEST_____\");\r\n          data.push({\r\n            id: keys[key],\r\n            data: dataObject[keys[key]].data,\r\n            dataActual: dataObject[keys[key]].data,\r\n          });\r\n        }\r\n      }\r\n      console.log(data);\r\n      console.log(\"DATA_RES\");\r\n      data.sort(\r\n        (a, b) =>\r\n          a[\"data\"][a[\"data\"].length - 1].y - b[\"data\"][b[\"data\"].length - 1].y\r\n      );\r\n\r\n      setRegionData(data);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  const legendOnClick = (d) => {\r\n    console.log(\"legendOnClick\");\r\n    console.log(d);\r\n    let split = d.id.split(\"pois]\");\r\n    let data = [...regionData];\r\n\r\n    if (split[0] === \"[\") {\r\n      console.log(split[1]);\r\n      console.log(\"split[1]\");\r\n      let index = data.findIndex((obj) => obj.id === d.id);\r\n      console.log(data);\r\n      console.log(index);\r\n\r\n      data[index].data = data[index].dataActual;\r\n      data[index].id = split[1];\r\n    } else {\r\n      let index = data.findIndex((obj) => obj.id === d.id);\r\n      data[index].data = [];\r\n      data[index].id = \"[pois]\" + data[index].id;\r\n    }\r\n\r\n    setRegionData(data);\r\n  };\r\n\r\n  const legendFormater = (d) => {\r\n    console.log(d);\r\n    console.log(\"xx\");\r\n    console.log(\"legendFormater\");\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: \"450px\", marginBottom: \"100px\" }}>\r\n      {/*    <div>RegionBarLine</div> */}\r\n      <h5>Neliöhinnat maakunnittain 2010-2019</h5>\r\n\r\n      <ResponsiveLine\r\n        data={regionData}\r\n        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\r\n        onClick={(node) => {\r\n          console.log(node);\r\n          console.log(\"CLICKEd\");\r\n        }}\r\n        tooltip={({ point }) => {\r\n          console.log(point);\r\n          console.log(\"TOOLTIP\");\r\n          return (\r\n            <div\r\n              style={{\r\n                background: \"white\",\r\n                padding: \"9px 12px\",\r\n                border: \"1px solid #ccc\",\r\n                fontSize: \"0.85rem\",\r\n              }}\r\n            >\r\n              <div style={{}}>\r\n                <div\r\n                  style={{\r\n                    color: point.serieColor,\r\n                    padding: \"3px 0\",\r\n                    display: \"inline-block\",\r\n                  }}\r\n                >\r\n                  <span\r\n                    style={{\r\n                      height: \"10px\",\r\n                      width: \"10px\",\r\n                      backgroundColor: point.serieColor,\r\n                      borderRadius: \"50%\",\r\n                      display: \"inline-block\",\r\n                      marginRight: \"5px\",\r\n                    }}\r\n                  ></span>\r\n                  <strong>{point.serieId}</strong>\r\n                </div>\r\n                <div style={{ display: \"inline-block\" }}>\r\n                  {\"  \"}[{point.data.xFormatted}]\r\n                </div>\r\n              </div>\r\n              <div> {point.data.yFormatted} €/m2 </div>\r\n            </div>\r\n          );\r\n          return (\r\n            <div>\r\n              <p>\r\n                {point.serieId} ({point.data.xFormatted})\r\n              </p>\r\n              <p>{point.data.yFormatted} €/m2</p>\r\n            </div>\r\n          );\r\n        }}\r\n        xScale={{ type: \"point\" }}\r\n        yScale={{\r\n          type: \"linear\",\r\n          min: \"auto\",\r\n          max: \"auto\",\r\n          stacked: false,\r\n          reverse: false,\r\n        }}\r\n        yFormat=\" >-.2f\"\r\n        axisTop={null}\r\n        axisRight={null}\r\n        axisBottom={{\r\n          orient: \"bottom\",\r\n          tickSize: 5,\r\n          tickPadding: 5,\r\n          tickRotation: 0,\r\n          legend: \"year\",\r\n          legendOffset: 36,\r\n          legendPosition: \"middle\",\r\n        }}\r\n        axisLeft={{\r\n          orient: \"left\",\r\n          tickSize: 5,\r\n          tickPadding: 5,\r\n          tickRotation: 0,\r\n          legend: \"€/m2\",\r\n          legendOffset: -40,\r\n          legendPosition: \"middle\",\r\n        }}\r\n        pointSize={10}\r\n        pointColor={{ theme: \"background\" }}\r\n        pointBorderWidth={2}\r\n        pointBorderColor={{ from: \"serieColor\" }}\r\n        pointLabelYOffset={-12}\r\n        useMesh={true}\r\n        legendFormat={legendFormater}\r\n        legends={[\r\n          {\r\n            anchor: \"bottom-right\",\r\n            direction: \"column\",\r\n            justify: false,\r\n            translateX: 100,\r\n            translateY: 0,\r\n            itemsSpacing: 0,\r\n            itemDirection: \"left-to-right\",\r\n            itemWidth: 80,\r\n            itemHeight: 20,\r\n            itemOpacity: 0.75,\r\n            symbolSize: 12,\r\n            symbolShape: \"circle\",\r\n            symbolBorderColor: \"rgba(0, 0, 0, .5)\",\r\n            onClick: legendOnClick,\r\n            effects: [\r\n              {\r\n                on: \"hover\",\r\n                style: {\r\n                  itemBackground: \"rgba(0, 0, 0, .03)\",\r\n                  itemOpacity: 1,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        ]}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\setUp\\PXWeb\\getData.js",["148","149"],"import pxwebAPI from \"./api/api.js\";\r\nimport pxwebAPIGet from \"./api/apiGET.js\";\r\nimport parseResponse from \"./parseResponse.js\";\r\nimport getData from \"../dataSetUp.js\";\r\nimport regions from \"../../assets/data/PXWeb/regions.json\";\r\n\r\nasync function fetchData(params) {\r\n  let apiResonse = await pxwebAPI(params);\r\n  if (apiResonse == \"fail\") return apiResonse;\r\n\r\n  let data = await parseResponse(apiResonse);\r\n  return data;\r\n}\r\n\r\nexport default async function pxwebGetData(structure, params = null) {\r\n  let zipsByRegionData = [];\r\n  const zipsByRegion = async (params) => {\r\n    if (zipsByRegionData.length > 0) return zipsByRegionData;\r\n    let zips = await getData(\"zipsByRegion\");\r\n\r\n    let resArray = [];\r\n\r\n    let limitCount = 0;\r\n    for (const region in zips) {\r\n      //if (limitCount === 2) break;\r\n      let zipsParam = [];\r\n      let zipsList = zips[region].data;\r\n      for (const zip in zipsList) {\r\n        zipsParam.push(zipsList[zip].postinumero);\r\n      }\r\n      zipsParam = await removeMissingZips(zipsParam);\r\n\r\n      params[\"zips\"] = zipsParam;\r\n      let failCount = 0;\r\n      let res;\r\n\r\n      const reRun = async () => {\r\n        res = await fetchData(params);\r\n\r\n        if (res === \"fail\") {\r\n          console.log(\"RERUN_________\");\r\n          console.log(failCount);\r\n          failCount++;\r\n          if (failCount < 10) {\r\n            setTimeout(reRun, 20000);\r\n          } else {\r\n            res = {};\r\n            res[\"data\"] = \"FAIL_DATA_FETCH\";\r\n          }\r\n        }\r\n      };\r\n\r\n      await reRun();\r\n\r\n      resArray.push({ place: zips[region].place, data: res[\"data\"] });\r\n      limitCount++;\r\n    }\r\n\r\n    zipsByRegionData = resArray;\r\n    return resArray;\r\n  };\r\n\r\n  let summaryByRegionData = [];\r\n  const summaryByRegion = async (params) => {\r\n    console.log(summaryByRegionData.length);\r\n    console.log(\"summaryByRegion___\");\r\n    if (summaryByRegionData.length > 0) return summaryByRegionData;\r\n    console.log(regions);\r\n\r\n    let resArr = [];\r\n    if (true) {\r\n      for (const year in regions) {\r\n        let object = { year: regions[year].year };\r\n        let regionArray = [];\r\n        for (const region in regions[year].data) {\r\n          let obj = {\r\n            place: regions[year].data[region].place,\r\n            data: JSON.parse(regions[year].data[region].data),\r\n          };\r\n\r\n          regionArray.push(obj);\r\n        }\r\n        object[\"data\"] = regionArray;\r\n        resArr.push(object);\r\n      }\r\n    }\r\n    console.log(resArr);\r\n    console.log(\"summaryByRegionData_RES_\");\r\n    summaryByRegionData = resArr;\r\n    return resArr;\r\n  };\r\n\r\n  if (structure === \"zipsByRegion\") return zipsByRegion(params);\r\n  if (structure === \"summaryByRegion\") return summaryByRegion(params);\r\n}\r\n\r\nlet PXWebZipList = [];\r\nconst removeMissingZips = async (list) => {\r\n  if (PXWebZipList.length === 0) {\r\n    let res = await pxwebAPIGet();\r\n\r\n    let resZips = [];\r\n    try {\r\n      resZips = res.variables.filter((e) => e.code === \"Postinumero\")[0].values;\r\n    } catch (error) {}\r\n\r\n    PXWebZipList = resZips;\r\n  }\r\n\r\n  const intersection = list.filter(function (item) {\r\n    return PXWebZipList.includes(item);\r\n  });\r\n\r\n  return intersection;\r\n};\r\n","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\setUp\\PXWeb\\parseResponse.js",["150","151","152","153","154","155"],"export default async function parseResponse(data) {\r\n  //let data = await pxwebAPI(params);\r\n\r\n  if (data === null) return null;\r\n  let dimension = null;\r\n  let values = null;\r\n\r\n  try {\r\n    dimension = data.dataset.dimension;\r\n    values = data.dataset.value;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n\r\n  let zipsObj = dimension.Postinumero.category.index;\r\n  let ids = dimension.id;\r\n\r\n  let sizeArray = dimension.size;\r\n\r\n  let itemCombs = sizeArray.reduce(function (a, b) {\r\n    return a * b;\r\n  }, 1);\r\n\r\n  let count = 0;\r\n  let i = 0;\r\n\r\n  const createObject = (\r\n    obj,\r\n    type,\r\n    structure,\r\n    objectsList,\r\n    pos,\r\n    values,\r\n    count\r\n  ) => {\r\n    let objElement = {};\r\n\r\n    while (pos < Object.keys(structure).length) {\r\n      let labels = objectsList[structure[pos]].category.label;\r\n      let labelIndeces = objectsList[structure[pos]].category.index;\r\n\r\n      let labelsArr = [];\r\n      for (const index in labelIndeces) {\r\n        labelsArr.push([labelIndeces[index], labels[index]]);\r\n      }\r\n      labelsArr.sort(function (a, b) {\r\n        return a[0] - b[0];\r\n      });\r\n      for (const item in labelsArr) {\r\n        objElement[labelsArr[item][1]] = \"\";\r\n      }\r\n\r\n      if (Object.keys(obj).length === 0) {\r\n        obj = objElement;\r\n      } else {\r\n        for (const key in obj) {\r\n          obj[key] = objElement;\r\n        }\r\n      }\r\n\r\n      pos = pos + 1;\r\n\r\n      if (pos === Object.keys(structure).length) {\r\n        for (const element in objElement) {\r\n          count = count + 1;\r\n        }\r\n      }\r\n\r\n      return createObject(\r\n        objElement,\r\n        type,\r\n        structure,\r\n        objectsList,\r\n        pos,\r\n        values,\r\n        count\r\n      );\r\n    }\r\n  };\r\n  let dataObject = { data: \"\" };\r\n  createObject(dataObject, \"item\", ids, dimension, 0, values, 0);\r\n\r\n  dataObject = dataObject.data;\r\n\r\n  const createTotalObject = (obj, structure) => {\r\n    let objKeys = Object.keys(structure);\r\n\r\n    for (const key in objKeys) {\r\n      if (Object.keys(structure[objKeys[key]]).length === 0) {\r\n        Object.defineProperty(obj, objKeys[key], {\r\n          value: [],\r\n          writable: true,\r\n          enumerable: true,\r\n        });\r\n        Object.defineProperty(obj, objKeys[key] + \"_count\", {\r\n          value: [],\r\n          writable: true,\r\n          enumerable: true,\r\n        });\r\n        Object.defineProperty(obj, objKeys[key] + \"_zip\", {\r\n          value: [],\r\n          writable: true,\r\n          enumerable: true,\r\n        });\r\n      } else {\r\n        Object.defineProperty(obj, objKeys[key], {\r\n          value: {},\r\n          writable: true,\r\n          enumerable: true,\r\n        });\r\n      }\r\n\r\n      createTotalObject(obj[objKeys[key]], structure[objKeys[key]]);\r\n    }\r\n  };\r\n\r\n  let totalObject = { data: {} };\r\n  if (dataObject[Object.keys(dataObject)[0]] !== undefined) {\r\n    createTotalObject(totalObject.data, dataObject[Object.keys(dataObject)[0]]);\r\n  }\r\n\r\n  let resArr = [];\r\n\r\n  const loopValues = (\r\n    obj,\r\n    totalObject,\r\n    resObject,\r\n    values,\r\n    sizeArray,\r\n    round,\r\n    objectRound,\r\n    testArr\r\n  ) => {\r\n    let sizes = [...sizeArray];\r\n    objectRound = objectRound + 1;\r\n    sizes.shift();\r\n\r\n    let itemCombs = sizes.reduce(function (a, b) {\r\n      return a * b;\r\n    }, 1);\r\n\r\n    let objKeys = Object.keys(obj);\r\n\r\n    let loopCount = 0;\r\n    let newRound = 0;\r\n    for (const key in objKeys) {\r\n      Object.defineProperty(resObject, objKeys[key], {\r\n        value: {},\r\n        writable: true,\r\n        enumerable: true,\r\n      });\r\n      newRound = round + loopCount * itemCombs;\r\n\r\n      //When value is empty string we are are the end of the object tree. -> save value to the variable\r\n      if (obj[objKeys[key]] === \"\") {\r\n        let treeCount = 0;\r\n\r\n        for (const item in obj) {\r\n          testArr.push(values[newRound + treeCount]);\r\n          try {\r\n            if (true) {\r\n              if (values[newRound + treeCount] === null) {\r\n                Object.defineProperty(resObject, item, {\r\n                  value: \"NULL\",\r\n                  writable: true,\r\n                  enumerable: true,\r\n                });\r\n              } else {\r\n                Object.defineProperty(resObject, item, {\r\n                  value: values[newRound + treeCount],\r\n                  writable: true,\r\n                  enumerable: true,\r\n                });\r\n\r\n                totalObject[item].push(values[newRound + treeCount]);\r\n                if (item === \"Neliöhinta (EUR/m2)\") {\r\n                  totalObject[item + \"_count\"].push(\r\n                    values[newRound + treeCount + 1]\r\n                  );\r\n                }\r\n              }\r\n            }\r\n          } catch (error) {}\r\n\r\n          treeCount = treeCount + 1;\r\n        }\r\n        break;\r\n      }\r\n\r\n      let totalObjectToSend;\r\n\r\n      if (objectRound === 1) {\r\n        totalObjectToSend = totalObject.data;\r\n      } else if (objectRound > 1) {\r\n        totalObjectToSend = totalObject[objKeys[key]];\r\n      }\r\n\r\n      loopValues(\r\n        obj[objKeys[key]],\r\n        totalObjectToSend,\r\n        resObject[objKeys[key]],\r\n        values,\r\n        sizes,\r\n        newRound,\r\n        objectRound,\r\n        testArr\r\n      );\r\n      loopCount++;\r\n    }\r\n    //return resObject;\r\n  };\r\n\r\n  let testArr = [];\r\n  let sizeArrayCombs = [...sizeArray];\r\n\r\n  let newObject = { data: {} };\r\n\r\n  resArr = loopValues(\r\n    dataObject,\r\n    totalObject,\r\n    newObject.data,\r\n    values,\r\n    sizeArrayCombs,\r\n    0,\r\n    0,\r\n    testArr\r\n  );\r\n\r\n  newObject.data[\"total\"] = totalObject;\r\n\r\n  //calculate averages for regions\r\n\r\n  newObject.data.total = newObject.data.total.data;\r\n\r\n  let keysLayer1 = []; //Object.keys(newObject.data.total);\r\n\r\n  Object.getOwnPropertyNames(newObject.data.total).forEach((key) => {\r\n    keysLayer1.push(key);\r\n  });\r\n  for (const layer1 in keysLayer1) {\r\n    let keysLayer2 = []; // Object.keys(newObject.data.total[keysLayer1[layer1]]);\r\n    Object.getOwnPropertyNames(\r\n      newObject.data.total[keysLayer1[layer1]]\r\n    ).forEach((key) => {\r\n      keysLayer2.push(key);\r\n    });\r\n\r\n    for (const layer2 in keysLayer2) {\r\n      let keysLayer3 = []; // Object.keys(newObject.data.total[keysLayer1[layer1]]);\r\n      Object.getOwnPropertyNames(\r\n        newObject.data.total[keysLayer1[layer1]][keysLayer2[layer2]]\r\n      ).forEach((key) => {\r\n        keysLayer3.push(key);\r\n      });\r\n\r\n      for (const layer3 in keysLayer3) {\r\n        let countArray =\r\n          newObject.data.total[keysLayer1[layer1]][keysLayer2[layer2]][\r\n            keysLayer3[layer3]\r\n          ][\"Neliöhinta (EUR/m2)_count\"];\r\n        let countSum = countArray.reduce(function (a, b) {\r\n          return a + b;\r\n        }, 0);\r\n\r\n        let priceArray =\r\n          newObject.data.total[keysLayer1[layer1]][keysLayer2[layer2]][\r\n            keysLayer3[layer3]\r\n          ][\"Neliöhinta (EUR/m2)\"];\r\n        let avgPrice = 0;\r\n        for (const item in priceArray) {\r\n          avgPrice =\r\n            avgPrice + (priceArray[item] * countArray[item]) / countSum;\r\n        }\r\n\r\n        newObject.data.total[keysLayer1[layer1]][keysLayer2[layer2]][\r\n          keysLayer3[layer3]\r\n        ][\"avg_Neliöhinta (EUR/m2)\"] = avgPrice;\r\n\r\n        let countTotalArray =\r\n          newObject.data.total[keysLayer1[layer1]][keysLayer2[layer2]][\r\n            keysLayer3[layer3]\r\n          ][\"Kauppojen lukumäärä\"];\r\n        let countTotalSum = countTotalArray.reduce(function (a, b) {\r\n          return a + b;\r\n        }, 0);\r\n\r\n        newObject.data.total[keysLayer1[layer1]][keysLayer2[layer2]][\r\n          keysLayer3[layer3]\r\n        ][\"total_Kauppojen lukumäärä\"] = countTotalSum;\r\n      }\r\n    }\r\n  }\r\n  return newObject;\r\n}\r\n","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\setUp\\PXWeb\\api\\api.js",["156","157"],"import fetch from \"node-fetch\";\r\n\r\nexport default async function pxwebAPI({ years, zips }) {\r\n  const query = [];\r\n  if (years !== undefined) {\r\n    query.push({\r\n      code: \"Vuosi\",\r\n      selection: {\r\n        filter: \"item\",\r\n        values: years,\r\n      },\r\n    });\r\n  } else {\r\n    query.push({\r\n      code: \"Vuosi\",\r\n      selection: {\r\n        filter: \"item\",\r\n        values: [2019],\r\n      },\r\n    });\r\n  }\r\n\r\n  if (zips !== undefined) {\r\n    query.push({\r\n      code: \"Postinumero\",\r\n      selection: {\r\n        filter: \"item\",\r\n        values: zips, // [\"00120\", \"00100\"], // zips, //[\"00120\"], //zips,\r\n      },\r\n    });\r\n  } else {\r\n    query.push({\r\n      code: \"Postinumero\",\r\n      selection: {\r\n        filter: \"item\",\r\n        values: [\"00120\"],\r\n      },\r\n    });\r\n  }\r\n\r\n  /*   console.log(\"pxwebAPI_PARAMS\");\r\n  console.log(years);\r\n  console.log(zips); */\r\n\r\n  const url =\r\n    \"http://pxnet2.stat.fi/PXWeb/api/v1/fi/StatFin/asu/ashi/vv/statfin_ashi_pxt_112q.px\";\r\n  /* \"http://pxnet2.stat.fi/PXWeb/api/v1/fi/StatFin/asu/ashi/nj/statfin_ashi_pxt_112p.px\"; */\r\n  // Default options are marked with *\r\n  const /* response */ runFetch = async () => {\r\n      return await fetch(url, {\r\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n        mode: \"cors\", // no-cors, *cors, same-origin\r\n        cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n        credentials: \"same-origin\", // include, *same-origin, omit\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        redirect: \"follow\", // manual, *follow, error\r\n        referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n        body: JSON.stringify({\r\n          query: query,\r\n          response: {\r\n            format: \"json-stat\",\r\n          },\r\n        }), // body data type must match \"Content-Type\" header\r\n      });\r\n    };\r\n\r\n  let failCount = 0;\r\n  let response = null;\r\n  try {\r\n    response = await runFetch();\r\n  } catch (error) {\r\n    console.log(\"RESPONSE___ERROR__\");\r\n  }\r\n\r\n  if (response !== null && response.status !== 200) {\r\n    console.log(\"EI_OLLUT_200\");\r\n    console.log(failCount);\r\n    while (failCount < 2) {\r\n      console.log(\"UUSI_YRITYS\");\r\n      console.log(failCount);\r\n\r\n      response = await runFetch();\r\n      if (response.status === 200) break;\r\n      failCount++;\r\n    }\r\n    return \"fail\";\r\n    if (response.status !== 200) return null;\r\n  }\r\n\r\n  return response.json(); // parses JSON response into native JavaScript objects\r\n}\r\n\r\n// Example POST method implementation:\r\nasync function postData(url = \"\", data = {}) {}\r\n","C:\\Users\\juwew\\OneDrive\\Asiakirjat\\Coding\\kauppahinnat\\project\\kauppahinnat.fi\\src\\setUp\\PXWeb\\api\\apiGET.js",[],{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","severity":1,"message":"163","line":1,"column":27,"nodeType":"164","messageId":"165","endLine":1,"endColumn":36},{"ruleId":"162","severity":1,"message":"166","line":10,"column":8,"nodeType":"164","messageId":"165","endLine":10,"endColumn":15},{"ruleId":"162","severity":1,"message":"167","line":13,"column":30,"nodeType":"164","messageId":"165","endLine":13,"endColumn":51},{"ruleId":"162","severity":1,"message":"168","line":14,"column":29,"nodeType":"164","messageId":"165","endLine":14,"endColumn":49},{"ruleId":"162","severity":1,"message":"169","line":15,"column":10,"nodeType":"164","messageId":"165","endLine":15,"endColumn":17},{"ruleId":"162","severity":1,"message":"170","line":15,"column":19,"nodeType":"164","messageId":"165","endLine":15,"endColumn":29},{"ruleId":"171","severity":1,"message":"172","line":17,"column":3,"nodeType":"173","messageId":"174","endLine":24,"endColumn":5},{"ruleId":"171","severity":1,"message":"172","line":26,"column":3,"nodeType":"175","messageId":"174","endLine":30,"endColumn":10},{"ruleId":"176","severity":1,"message":"177","line":30,"column":6,"nodeType":"178","endLine":30,"endColumn":8,"suggestions":"179"},{"ruleId":"171","severity":1,"message":"172","line":39,"column":3,"nodeType":"180","messageId":"174","endLine":68,"endColumn":5},{"ruleId":"176","severity":1,"message":"177","line":25,"column":6,"nodeType":"178","endLine":25,"endColumn":8,"suggestions":"181"},{"ruleId":"171","severity":1,"message":"172","line":17,"column":3,"nodeType":"173","messageId":"174","endLine":24,"endColumn":5},{"ruleId":"171","severity":1,"message":"172","line":26,"column":3,"nodeType":"175","messageId":"174","endLine":30,"endColumn":10},{"ruleId":"176","severity":1,"message":"177","line":30,"column":6,"nodeType":"178","endLine":30,"endColumn":8,"suggestions":"182"},{"ruleId":"171","severity":1,"message":"172","line":39,"column":3,"nodeType":"180","messageId":"174","endLine":68,"endColumn":5},{"ruleId":"162","severity":1,"message":"183","line":12,"column":10,"nodeType":"164","messageId":"165","endLine":12,"endColumn":27},{"ruleId":"162","severity":1,"message":"184","line":12,"column":29,"nodeType":"164","messageId":"165","endLine":12,"endColumn":49},{"ruleId":"176","severity":1,"message":"185","line":80,"column":6,"nodeType":"178","endLine":80,"endColumn":16,"suggestions":"186"},{"ruleId":"176","severity":1,"message":"187","line":115,"column":6,"nodeType":"178","endLine":115,"endColumn":24,"suggestions":"188"},{"ruleId":"162","severity":1,"message":"189","line":126,"column":9,"nodeType":"164","messageId":"165","endLine":126,"endColumn":19},{"ruleId":"162","severity":1,"message":"190","line":2,"column":8,"nodeType":"164","messageId":"165","endLine":2,"endColumn":11},{"ruleId":"162","severity":1,"message":"191","line":3,"column":8,"nodeType":"164","messageId":"165","endLine":3,"endColumn":19},{"ruleId":"176","severity":1,"message":"192","line":42,"column":6,"nodeType":"178","endLine":42,"endColumn":19,"suggestions":"193"},{"ruleId":"176","severity":1,"message":"194","line":174,"column":8,"nodeType":"178","endLine":174,"endColumn":20,"suggestions":"195"},{"ruleId":"196","severity":1,"message":"197","line":17,"column":42,"nodeType":"198","messageId":"199","endLine":17,"endColumn":51},{"ruleId":"196","severity":1,"message":"197","line":25,"column":34,"nodeType":"198","messageId":"199","endLine":25,"endColumn":43},{"ruleId":"176","severity":1,"message":"200","line":31,"column":6,"nodeType":"178","endLine":31,"endColumn":12,"suggestions":"201"},{"ruleId":"162","severity":1,"message":"202","line":2,"column":10,"nodeType":"164","messageId":"165","endLine":2,"endColumn":14},{"ruleId":"203","severity":1,"message":"204","line":35,"column":59,"nodeType":"205","messageId":"206","endLine":35,"endColumn":61},{"ruleId":"196","severity":1,"message":"207","line":49,"column":18,"nodeType":"208","messageId":"199","endLine":49,"endColumn":20},{"ruleId":"209","severity":1,"message":"210","line":237,"column":1,"nodeType":"211","messageId":"212","endLine":245,"endColumn":2},{"ruleId":"162","severity":1,"message":"202","line":2,"column":10,"nodeType":"164","messageId":"165","endLine":2,"endColumn":14},{"ruleId":"162","severity":1,"message":"213","line":3,"column":10,"nodeType":"164","messageId":"165","endLine":3,"endColumn":23},{"ruleId":"162","severity":1,"message":"214","line":4,"column":8,"nodeType":"164","messageId":"165","endLine":4,"endColumn":14},{"ruleId":"162","severity":1,"message":"215","line":12,"column":10,"nodeType":"164","messageId":"165","endLine":12,"endColumn":17},{"ruleId":"162","severity":1,"message":"216","line":12,"column":19,"nodeType":"164","messageId":"165","endLine":12,"endColumn":29},{"ruleId":"162","severity":1,"message":"217","line":13,"column":10,"nodeType":"164","messageId":"165","endLine":13,"endColumn":23},{"ruleId":"162","severity":1,"message":"218","line":13,"column":25,"nodeType":"164","messageId":"165","endLine":13,"endColumn":41},{"ruleId":"162","severity":1,"message":"219","line":14,"column":10,"nodeType":"164","messageId":"165","endLine":14,"endColumn":20},{"ruleId":"162","severity":1,"message":"220","line":15,"column":10,"nodeType":"164","messageId":"165","endLine":15,"endColumn":28},{"ruleId":"162","severity":1,"message":"221","line":15,"column":30,"nodeType":"164","messageId":"165","endLine":15,"endColumn":51},{"ruleId":"162","severity":1,"message":"222","line":17,"column":9,"nodeType":"164","messageId":"165","endLine":17,"endColumn":32},{"ruleId":"196","severity":1,"message":"207","line":29,"column":36,"nodeType":"208","messageId":"199","endLine":29,"endColumn":38},{"ruleId":"209","severity":1,"message":"210","line":50,"column":1,"nodeType":"211","messageId":"212","endLine":58,"endColumn":2},{"ruleId":"162","severity":1,"message":"166","line":6,"column":8,"nodeType":"164","messageId":"165","endLine":6,"endColumn":15},{"ruleId":"162","severity":1,"message":"223","line":11,"column":10,"nodeType":"164","messageId":"165","endLine":11,"endColumn":26},{"ruleId":"162","severity":1,"message":"224","line":11,"column":28,"nodeType":"164","messageId":"165","endLine":11,"endColumn":47},{"ruleId":"162","severity":1,"message":"225","line":12,"column":10,"nodeType":"164","messageId":"165","endLine":12,"endColumn":27},{"ruleId":"162","severity":1,"message":"226","line":12,"column":29,"nodeType":"164","messageId":"165","endLine":12,"endColumn":48},{"ruleId":"171","severity":1,"message":"172","line":148,"column":11,"nodeType":"180","messageId":"174","endLine":155,"endColumn":13},{"ruleId":"203","severity":1,"message":"204","line":9,"column":18,"nodeType":"205","messageId":"206","endLine":9,"endColumn":20},{"ruleId":"162","severity":1,"message":"227","line":56,"column":7,"nodeType":"164","messageId":"165","endLine":56,"endColumn":17},{"ruleId":"162","severity":1,"message":"228","line":15,"column":7,"nodeType":"164","messageId":"165","endLine":15,"endColumn":14},{"ruleId":"162","severity":1,"message":"229","line":20,"column":7,"nodeType":"164","messageId":"165","endLine":20,"endColumn":16},{"ruleId":"162","severity":1,"message":"230","line":24,"column":7,"nodeType":"164","messageId":"165","endLine":24,"endColumn":12},{"ruleId":"162","severity":1,"message":"231","line":25,"column":7,"nodeType":"164","messageId":"165","endLine":25,"endColumn":8},{"ruleId":"162","severity":1,"message":"232","line":64,"column":20,"nodeType":"164","messageId":"165","endLine":64,"endColumn":27},{"ruleId":"162","severity":1,"message":"233","line":218,"column":3,"nodeType":"164","messageId":"165","endLine":218,"endColumn":9},{"ruleId":"171","severity":1,"message":"172","line":90,"column":5,"nodeType":"234","messageId":"174","endLine":90,"endColumn":46},{"ruleId":"162","severity":1,"message":"235","line":97,"column":16,"nodeType":"164","messageId":"165","endLine":97,"endColumn":24},"no-native-reassign",["236"],"no-negated-in-lhs",["237"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'getData' is defined but never used.","'setTransactionsByCity' is assigned a value but never used.","'setTransactionsByZip' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode","ExpressionStatement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'Sales'. Either include it or remove the dependency array.","ArrayExpression",["238"],"ReturnStatement",["239"],["240"],"'summaryDataByCity' is assigned a value but never used.","'setsummaryDataByCity' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'summaryData'. Either include it or remove the dependency array. You can also do a functional update 'setsummaryData(s => ...)' if you only need 'summaryData' in the 'setsummaryData' call.",["241"],"React Hook useEffect has a missing dependency: 'initLoad'. Either include it or remove the dependency array.",["242"],"'matchesRes' is assigned a value but never used.","'Nav' is defined but never used.","'NavDropdown' is defined but never used.","React Hook useEffect has missing dependencies: 'setSearchResults' and 'setSearching'. Either include them or remove the dependency array. If 'setSearching' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["243"],"React Hook useEffect has a missing dependency: 'props.sales'. Either include it or remove the dependency array.",["244"],"array-callback-return","Array.prototype.map() expects a return value from function.","FunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["245"],"'Link' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'ResponsiveBar' is defined but never used.","'Button' is defined but never used.","'barData' is assigned a value but never used.","'setBarData' is assigned a value but never used.","'barDataOthers' is assigned a value but never used.","'setBarDataOthers' is assigned a value but never used.","'showOthers' is assigned a value but never used.","'noTransactionsList' is assigned a value but never used.","'setNoTransactionsList' is assigned a value but never used.","'showOthersButtonHandler' is assigned a value but never used.","'regionDataActive' is assigned a value but never used.","'setRegionDataActive' is assigned a value but never used.","'regiondDataHidden' is assigned a value but never used.","'setRegionDataHidden' is assigned a value but never used.","'limitCount' is assigned a value but never used.","'zipsObj' is assigned a value but never used.","'itemCombs' is assigned a value but never used.","'count' is assigned a value but never used.","'i' is assigned a value but never used.","'element' is assigned a value but never used.","'resArr' is assigned a value but never used.","IfStatement","'postData' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"246","fix":"247"},{"desc":"246","fix":"248"},{"desc":"246","fix":"249"},{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},"Update the dependencies array to be: [Sales]",{"range":"260","text":"261"},{"range":"262","text":"261"},{"range":"263","text":"261"},"Update the dependencies array to be: [initLoad, summaryData]",{"range":"264","text":"265"},"Update the dependencies array to be: [initLoad, regionInfoActive]",{"range":"266","text":"267"},"Update the dependencies array to be: [searchValue, setSearchResults, setSearching]",{"range":"268","text":"269"},"Update the dependencies array to be: [props.room, props.sales]",{"range":"270","text":"271"},"Update the dependencies array to be: [area, data]",{"range":"272","text":"273"},[852,854],"[Sales]",[784,786],[859,861],[2421,2431],"[initLoad, summaryData]",[3328,3346],"[initLoad, regionInfoActive]",[1092,1105],"[searchValue, setSearchResults, setSearching]",[5284,5296],"[props.room, props.sales]",[794,800],"[area, data]"]